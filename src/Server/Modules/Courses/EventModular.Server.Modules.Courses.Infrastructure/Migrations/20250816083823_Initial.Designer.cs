// <auto-generated />
using System;
using System.Collections.Generic;
using EventModular.Server.Modules.Courses.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventModular.Server.Modules.Courses.Infrastructure.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20250816083823_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubdomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course", "course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Index", "EventModular.Server.Modules.Courses.Domain.Entities.CourseLesson.Index#IndexValue", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("CourseLesson", "course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLessonLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseLessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseLessonId");

                    b.ToTable("CourseLessonLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CoursePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursePrice", "course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.ComplexProperty<Dictionary<string, object>>("Index", "EventModular.Server.Modules.Courses.Domain.Entities.CourseSection.Index#IndexValue", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSection", "course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseSectionLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("CourseSectionLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLesson", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Courses.Domain.Entities.CourseSection", "CourseSection")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLessonLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Courses.Domain.Entities.CourseLesson", "CourseLesson")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseLesson");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Courses.Domain.Entities.Course", "Course")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CoursePrice", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Courses.Domain.Entities.Course", "Course")
                        .WithMany("Prices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseSection", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Courses.Domain.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseSectionLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Courses.Domain.Entities.CourseSection", "CourseSection")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.Course", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Prices");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseLesson", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Courses.Domain.Entities.CourseSection", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
