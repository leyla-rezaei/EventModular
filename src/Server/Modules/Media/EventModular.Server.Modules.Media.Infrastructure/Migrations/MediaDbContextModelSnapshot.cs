// <auto-generated />
using System;
using EventModular.Server.Modules.Media.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventModular.Server.Modules.Media.Infrastructure.Migrations
{
    [DbContext(typeof(MediaDbContext))]
    partial class MediaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.EventMediaLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventMediaId");

                    b.ToTable("EventMediaLocalization", "Localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("FileSizeType")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MediaContentType")
                        .HasColumnType("int");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaFile", "media");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.MediaFileLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.ToTable("MediaFileLocalization", "Localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.PostMediaLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PostMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostMediaId");

                    b.ToTable("PostMediaLocalization", "Localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.CommentMedia", b =>
                {
                    b.HasBaseType("EventModular.Server.Modules.Media.Domain.Entities.MediaFile");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("CommentMedia", "Media");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.EventMedia", b =>
                {
                    b.HasBaseType("EventModular.Server.Modules.Media.Domain.Entities.MediaFile");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.ToTable("EventMedia", "Media");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.PostMedia", b =>
                {
                    b.HasBaseType("EventModular.Server.Modules.Media.Domain.Entities.MediaFile");

                    b.Property<bool>("IsIndex")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("PostMedia", "Media");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.EventMediaLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Media.Domain.Entities.EventMedia", "EventMedia")
                        .WithMany()
                        .HasForeignKey("EventMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventMedia");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.MediaFileLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Media.Domain.Entities.MediaFile", "MediaFile")
                        .WithMany("Localizations")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.PostMediaLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Media.Domain.Entities.PostMedia", "PostMedia")
                        .WithMany()
                        .HasForeignKey("PostMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostMedia");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.CommentMedia", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Media.Domain.Entities.MediaFile", null)
                        .WithOne()
                        .HasForeignKey("EventModular.Server.Modules.Media.Domain.Entities.CommentMedia", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.EventMedia", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Media.Domain.Entities.MediaFile", null)
                        .WithOne()
                        .HasForeignKey("EventModular.Server.Modules.Media.Domain.Entities.EventMedia", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.PostMedia", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Media.Domain.Entities.MediaFile", null)
                        .WithOne()
                        .HasForeignKey("EventModular.Server.Modules.Media.Domain.Entities.PostMedia", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Media.Domain.Entities.MediaFile", b =>
                {
                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
