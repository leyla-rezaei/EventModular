// <auto-generated />
using System;
using EventModular.Server.Modules.Comments.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventModular.Server.Modules.Comments.Infrastructure.Migrations
{
    [DbContext(typeof(CommentDbContext))]
    partial class CommentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentStatus")
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("IsCommentNotUsefullCount")
                        .HasColumnType("int");

                    b.Property<int>("IsCommentUsefullCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ReplyedToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReplyedToCommentId");

                    b.ToTable("Comment");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.CommentLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentLocalization", "Localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.CourseComment", b =>
                {
                    b.HasBaseType("EventModular.Server.Modules.Comments.Domain.Entities.Comment");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBuyer")
                        .HasColumnType("bit");

                    b.ToTable("CourseComment", "comment");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.EventComment", b =>
                {
                    b.HasBaseType("EventModular.Server.Modules.Comments.Domain.Entities.Comment");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBuyer")
                        .HasColumnType("bit");

                    b.ToTable("EventComment", "comment");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.PostComment", b =>
                {
                    b.HasBaseType("EventModular.Server.Modules.Comments.Domain.Entities.Comment");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("PostComment", "comment");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.Comment", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Comments.Domain.Entities.Comment", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentId");

                    b.HasOne("EventModular.Server.Modules.Comments.Domain.Entities.Comment", "ReplyedToComment")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyedToCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReplyedToComment");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.CommentLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Comments.Domain.Entities.Comment", "Comment")
                        .WithMany("Localizations")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.CourseComment", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Comments.Domain.Entities.Comment", null)
                        .WithOne()
                        .HasForeignKey("EventModular.Server.Modules.Comments.Domain.Entities.CourseComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.EventComment", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Comments.Domain.Entities.Comment", null)
                        .WithOne()
                        .HasForeignKey("EventModular.Server.Modules.Comments.Domain.Entities.EventComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Comments.Domain.Entities.Comment", null)
                        .WithOne()
                        .HasForeignKey("EventModular.Server.Modules.Comments.Domain.Entities.PostComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Comments.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Localizations");

                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
