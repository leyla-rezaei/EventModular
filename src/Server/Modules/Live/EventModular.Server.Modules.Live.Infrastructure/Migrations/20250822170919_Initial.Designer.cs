// <auto-generated />
using System;
using EventModular.Server.Modules.Live.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventModular.Server.Modules.Live.Infrastructure.Migrations
{
    [DbContext(typeof(LiveDbContext))]
    [Migration("20250822170919_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LiveRoomId");

                    b.ToTable("LiveChatMessage", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveChatMessageLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveChatMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LiveChatMessageId");

                    b.ToTable("LiveChatMessageLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKicked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LeftAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LiveRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LiveParticipant", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePoll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LiveRoomId");

                    b.ToTable("LivePoll", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivePollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LivePollId");

                    b.ToTable("LivePollLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivePollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivePollId");

                    b.ToTable("LivePollOption", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollOptionLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivePollOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LiveQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LivePollOptionId");

                    b.HasIndex("LiveQuestionId");

                    b.ToTable("LivePollOptionLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("AnsweredById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AskedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LiveQuestion", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveQuestionLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiveQuestionLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LiveRoomId");

                    b.ToTable("LiveReaction", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ActualStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("AllowAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowChat")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowFileShare")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowModeratorKick")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowModeratorMute")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPolls")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowQnA")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRaiseHand")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowReactions")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowReplay")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowScreenShare")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("int");

                    b.Property<string>("DefaultLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableAdaptiveBitrate")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableRecordingCloud")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSimultaneousTranslation")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSubtitles")
                        .HasColumnType("bit");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMutedAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecorded")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeakConcurrentUsers")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecordingMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequireTicket")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ScheduledEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ScheduledStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ThumbnailMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalViewCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TotalWatchTime")
                        .HasColumnType("time");

                    b.Property<string>("VideoQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiveRoom", "live");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveRoomLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModificationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LiveRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LiveRoomId");

                    b.ToTable("LiveRoomLocalization", "localization");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveChatMessage", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LiveRoom", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("LiveRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveChatMessageLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LiveChatMessage", null)
                        .WithMany("Localizations")
                        .HasForeignKey("LiveChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePoll", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LiveRoom", null)
                        .WithMany("Polls")
                        .HasForeignKey("LiveRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LivePoll", "LivePoll")
                        .WithMany("Localizations")
                        .HasForeignKey("LivePollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LivePoll");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollOption", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LivePoll", "LivePoll")
                        .WithMany("Options")
                        .HasForeignKey("LivePollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LivePoll");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollOptionLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LivePollOption", "LivePollOption")
                        .WithMany("Localizations")
                        .HasForeignKey("LivePollOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LiveQuestion", null)
                        .WithMany("Localizations")
                        .HasForeignKey("LiveQuestionId");

                    b.Navigation("LivePollOption");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveReaction", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LiveRoom", "LiveRoom")
                        .WithMany()
                        .HasForeignKey("LiveRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiveRoom");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveRoomLocalization", b =>
                {
                    b.HasOne("EventModular.Server.Modules.Live.Domain.Entities.LiveRoom", null)
                        .WithMany("Localizations")
                        .HasForeignKey("LiveRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveChatMessage", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePoll", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LivePollOption", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveQuestion", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("EventModular.Server.Modules.Live.Domain.Entities.LiveRoom", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Localizations");

                    b.Navigation("Polls");
                });
#pragma warning restore 612, 618
        }
    }
}
